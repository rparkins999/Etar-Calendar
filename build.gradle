def gitdata = new ByteArrayOutputStream()
// change this line to /* if not using git
exec {
    commandLine "git", "--no-pager", "show", "--date=format:%H:%M:%S GMT%z %a %b %d %Y", "-s", "--format=from commit %H of %ad"
    standardOutput = gitdata;
}
//*/

buildscript {
    ext.kotlin_version = '1.3.72'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

project(':external:calendar') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 29
        buildToolsVersion '29.0.2'

        defaultConfig {
            minSdkVersion 19
            //noinspection ExpiredTargetSdkVersion
            targetSdkVersion 29
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }

        }

        lintOptions {
            abortOnError false
        }
    }
}

project(':external:colorpicker') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 29
        buildToolsVersion '29.0.2'

        defaultConfig {
            minSdkVersion 19
            //noinspection ExpiredTargetSdkVersion
            targetSdkVersion 29
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }
        }

        lintOptions {
            abortOnError false
        }
    }
}

project(':external:chips') {
    apply plugin: 'com.android.library'

    android {
        compileSdkVersion 29
        buildToolsVersion '29.0.2'

        defaultConfig {
            minSdkVersion 19
            //noinspection ExpiredTargetSdkVersion
            targetSdkVersion 29
        }

        sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    java.srcDirs = ['src']
                    resources.srcDirs = ['src']
                    aidl.srcDirs = ['src']
                    renderscript.srcDirs = ['src']
                    res.srcDirs = ['res']
                    assets.srcDirs = ['assets']
            }
        }


        lintOptions {
            abortOnError false
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1"

    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'

    implementation project(':external:calendar')
    implementation project(':external:colorpicker')
    implementation project(':external:chips')
}

def keystorePropertiesFile = rootProject.file("../Keys/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 19
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 29
        versionCode 23
        versionName "1.0.21"
        applicationId "ws.xsoh.etar"
    }

    useLibrary 'org.apache.http.legacy'

    sourceSets {
            main {
                manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src', 'external/ex/common/java'] // NOTE: this includes external/ex/common/java!
                resources.srcDirs = ['src']
                aidl.srcDirs = ['src']
                renderscript.srcDirs = ['src']
                res.srcDirs = ['res']
                assets.srcDirs = ['assets']
        }
    }

    buildTypes {
        release {
            // TODO: could be enabled for ProGuard minimization
            minifyEnabled false
            delete("build/intermediates/incremental/mergeReleaseResources/merger.xml")
            resValue("string", 'build_time', "${(new Date()).format('HH:mm:ss \'GMT\'Z EEE dd MMM yyyy')}")
            resValue("string", 'build_git', "${gitdata.toString()}")
        }

        debug {
            minifyEnabled false
            delete("build/intermediates/incremental/mergeDebugResources/merger.xml")
            resValue("string", 'build_time', "${(new Date()).format('HH:mm:ss \'GMT\'Z EEE dd MMM yyyy')}")
            resValue("string", 'build_git', "${gitdata.toString()}")

            applicationIdSuffix ".debug"
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}
